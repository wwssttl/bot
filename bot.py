import logging
import subprocess
import asyncio
import psutil
import os
import re
import signal
from wakeonlan import send_magic_packet
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ForceReply
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID)
ADMIN_ID = 6061771975  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
current_menu = {}

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
CPU_LOAD_THRESHOLD = 85  # –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
GPU_LOAD_THRESHOLD = 85  # –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
CPU_TEMP_THRESHOLD = 75  # –ì—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è
GPU_TEMP_THRESHOLD = 75  # –ì—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è (—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)

# ==================== –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def execute_command(command: list, success_msg: str, update: Update, menu: callable):
    try:
        proc = await asyncio.create_subprocess_exec(
            *command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await proc.communicate()
        if proc.returncode == 0:
            await send_response(update, f"‚úÖ {success_msg}", menu)
        else:
            error_msg = stderr.decode().strip() if stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã {command}: {error_msg}")
            await send_response(update, f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", menu)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
        await send_response(update, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}", menu)


async def send_response(update: Update, text: str, menu: callable = None):
    if not menu:
        menu = current_menu.get(update.effective_user.id, main_menu)
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=menu() if menu else None
            )
        elif update.message:
            await update.message.reply_text(text, reply_markup=menu() if menu else None)
        else:
            logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def find_app_executable(app_name: str):
    try:
        # –ü–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é which
        result = subprocess.run(
            ["which", app_name],
            capture_output=True,
            text=True
        )
        return result.stdout.strip() if result.returncode == 0 else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è '{app_name}': {e}")
        return None


async def manage_app_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await manage_app(update, context, "start")


async def manage_app_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await manage_app(update, context, "stop")


async def manage_app(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        if update.message:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    try:
        if not context.args:
            await send_response(update, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!", apps_menu)
            return

        app_name = " ".join(context.args).strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_path = find_app_executable(app_name)
        if not app_path:
            await send_response(update, f"‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{app_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", apps_menu)
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ DISPLAY –∏ XAUTHORITY
        display = os.environ.get('DISPLAY', ':0')
        xauth = os.environ.get('XAUTHORITY', f"/home/{os.environ.get('USER')}/.Xauthority")

        env = dict(os.environ, DISPLAY=display, XAUTHORITY=xauth)

        if action == "start":
            try:
                # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–º —Å–µ–∞–Ω—Å–µ
                proc = await asyncio.create_subprocess_exec(
                    app_path,
                    env=env,
                    stdout=asyncio.subprocess.DEVNULL,
                    stderr=asyncio.subprocess.DEVNULL,
                    start_new_session=True
                )
                await send_response(update, f"‚úÖ –ó–∞–ø—É—Å–∫–∞—é '{app_name}'...", apps_menu)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è '{app_name}': {e}")
                await send_response(update, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", apps_menu)

        elif action == "stop":
            try:
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await send_response(
                    update,
                    f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã '{app_name}'?\n–û—Ç–≤–µ—Ç—å—Ç–µ 'yes' –∏–ª–∏ 'no'.",
                    None
                )
                context.user_data['pending_kill'] = {
                    'app_name': app_name,
                    'menu': apps_menu
                }
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è '{app_name}': {e}")
                await send_response(update, f"‚ùå –û—à–∏–±–∫–∞: {e}", apps_menu)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º: {e}")
        await send_response(update, f"‚ùå –û—à–∏–±–∫–∞: {e}", apps_menu)


async def confirm_kill_app(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_response = update.message.text.lower()
    pending = context.user_data.get('pending_kill')
    if pending and user_response in ['yes', '–¥–∞', 'y', '–¥']:
        app_name = pending['app_name']
        try:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            proc = await asyncio.create_subprocess_exec(
                "pkill", "-f", app_name,
                stdout=asyncio.subprocess.DEVNULL,
                stderr=asyncio.subprocess.PIPE
            )
            await proc.wait()
            if proc.returncode == 0:
                await send_response(update, f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã '{app_name}'.", apps_menu)
            else:
                stderr = await proc.stderr.read()
                error_msg = stderr.decode().strip() if stderr else "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã."
                await send_response(update, f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {error_msg}", apps_menu)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è '{app_name}': {e}")
            await send_response(update, f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}", apps_menu)
        context.user_data['pending_kill'] = None
    else:
        await send_response(update, "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", pending['menu'])
        context.user_data['pending_kill'] = None


# ==================== –ú–ï–ù–Æ –ò –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π", callback_data="music_menu")],
        [InlineKeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏", callback_data="apps_menu")],
        [InlineKeyboardButton("üîå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º", callback_data="power_menu")],
        [InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", callback_data="system_menu")]
    ])


def music_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", callback_data="music_play"),
         InlineKeyboardButton("‚è∏ –ü–∞—É–∑–∞", callback_data="music_pause")],
        [InlineKeyboardButton("‚è≠ –°–ª–µ–¥—É—é—â–∏–π", callback_data="music_next"),
         InlineKeyboardButton("‚èÆ –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data="music_previous")],
        [InlineKeyboardButton("üéµ –¢–µ–∫—É—â–∞—è –ø–µ—Å–Ω—è", callback_data="music_current")],
        [InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –ø–ª–µ–µ—Ä", callback_data="music_choose_player")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])


def apps_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data="app_start")],
        [InlineKeyboardButton("üìù –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", callback_data="app_stop")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])


def power_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data="power_reboot")],
        [InlineKeyboardButton("‚èª –í—ã–∫–ª—é—á–µ–Ω–∏–µ", callback_data="power_shutdown")],
        [InlineKeyboardButton("üåô –°–ø—è—â–∏–π —Ä–µ–∂–∏–º", callback_data="power_suspend")],
        [InlineKeyboardButton("üíª –í–∫–ª—é—á–∏—Ç—å –ü–ö (WoL)", callback_data="power_wakeonlan")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])


def system_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="sys_info")],
        [InlineKeyboardButton("üîä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å", callback_data="sys_vol_set")],
        [InlineKeyboardButton("üîá –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫", callback_data="sys_vol_mute")],
        [InlineKeyboardButton("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–≥—Ä—É–∑–∫–µ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ", callback_data="sys_alerts")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: ID={user_id}, –û–∂–∏–¥–∞–µ–º—ã–π ID={ADMIN_ID}")

    if user_id != ADMIN_ID:
        if update.message:
            await update.message.reply_text(f"‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –í–∞—à ID: {user_id}")
        return

    current_menu[user_id] = main_menu
    if update.message:
        await update.message.reply_text(
            "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_menu()
        )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        logger.warning("–ù–µ—Ç callback_query –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")
        return

    await query.answer()
    user_id = update.effective_user.id

    if user_id != ADMIN_ID:
        await query.edit_message_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    data = query.data

    if data == "main_menu":
        current_menu[user_id] = main_menu
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        return

    menus = {
        "music_menu": (music_menu, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–æ–π"),
        "apps_menu": (apps_menu, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏"),
        "power_menu": (power_menu, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º"),
        "system_menu": (system_menu, "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    }

    if data in menus:
        menu_func, title = menus[data]
        current_menu[user_id] = menu_func
        await query.edit_message_text(f"üîß {title}:", reply_markup=menu_func())
        return

    try:
        await query.edit_message_text("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...", reply_markup=None)

        if data.startswith("music_"):
            action = data.split("_", 1)[1]
            await handle_music_action(update, context, action)

        elif data.startswith("power_"):
            await handle_power_action(update, context, data)

        elif data.startswith("sys_"):
            await handle_system_action(update, context, data)

        elif data == "app_start":
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /start_app <–∏–º—è_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è>",
                reply_markup=ForceReply(selective=True)
            )
        elif data == "app_stop":
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /stop_app <–∏–º—è_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è>",
                reply_markup=ForceReply(selective=True)
            )
        else:
            await send_response(update, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", main_menu)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
        await send_response(update, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}", main_menu)


async def handle_music_action(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è playerctl
        result = subprocess.run(["which", "playerctl"], capture_output=True)
        if result.returncode != 0:
            await send_response(update, "‚ùå –£—Ç–∏–ª–∏—Ç–∞ 'playerctl' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", music_menu)
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–µ–µ—Ä–æ–≤
        players_output = subprocess.check_output(["playerctl", "-l"], text=True)
        all_players = players_output.strip().split('\n')

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–ª–µ–µ—Ä–æ–≤: –∏—Å–∫–ª—é—á–∞–µ–º 'mpv', –≤—ã–±–∏—Ä–∞–µ–º 'chromium.instance'
        players = [
            player for player in all_players
            if player and player != 'mpv' and player.startswith('chromium.instance')
        ]

        if not players:
            await send_response(update, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–µ–µ—Ä–æ–≤.", music_menu)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –ø–ª–µ–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        selected_player = context.user_data.get('selected_player')

        if action == "choose_player":
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–ª–µ–µ—Ä
            buttons = [
                [InlineKeyboardButton(player, callback_data=f"select_player_{player}")]
                for player in players
            ]
            buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="music_menu")])
            reply_markup = InlineKeyboardMarkup(buttons)
            await send_response(update, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–µ—Ä:", lambda: reply_markup)
            return

        elif action.startswith("select_player_"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–ª–µ–µ—Ä
            selected_player = action.replace("select_player_", "")
            context.user_data['selected_player'] = selected_player
            await send_response(update, f"üéµ –í—ã–±—Ä–∞–Ω –ø–ª–µ–µ—Ä: {selected_player}", music_menu)
            return

        if not selected_player or selected_player not in players:
            # –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
            context.user_data['selected_player'] = None
            # –ï—Å–ª–∏ –æ–¥–∏–Ω –ø–ª–µ–µ—Ä, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if len(players) == 1:
                selected_player = players[0]
                context.user_data['selected_player'] = selected_player
            else:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–ª–µ–µ—Ä
                buttons = [
                    [InlineKeyboardButton(player, callback_data=f"select_player_{player}")]
                    for player in players
                ]
                buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="music_menu")])
                reply_markup = InlineKeyboardMarkup(buttons)
                await send_response(update, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–µ—Ä:", lambda: reply_markup)
                return

        if action == "current":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–µ
            proc = await asyncio.create_subprocess_exec(
                "playerctl", "-p", selected_player, "metadata", "--format", "{{ artist }} - {{ title }}",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.DEVNULL
            )
            stdout, _ = await proc.communicate()
            song_info = stdout.decode().strip()
            if song_info:
                await send_response(update, f"üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {song_info}", music_menu)
                return
            else:
                await send_response(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–µ.", music_menu)
        else:
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
            proc = await asyncio.create_subprocess_exec(
                "playerctl", "-p", selected_player, action,
                stdout=asyncio.subprocess.DEVNULL,
                stderr=asyncio.subprocess.DEVNULL
            )
            await proc.wait()
            await send_response(update, f"üéµ –ö–æ–º–∞–Ω–¥–∞ '{action}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–ª–µ–µ—Ä–∞ '{selected_player}'.", music_menu)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π: {e}")
        await send_response(update, f"‚ùå –û—à–∏–±–∫–∞: {e}", music_menu)


async def handle_power_action(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str):
    commands = {
        "power_reboot": ["sudo", "/sbin/reboot"],
        "power_shutdown": ["sudo", "/sbin/shutdown", "now"],
        "power_suspend": ["systemctl", "suspend"]
    }

    if action == "power_wakeonlan":
        await send_wakeonlan(update, context)
        return

    command = commands.get(action)
    if not command:
        await send_response(update, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–∏—Ç–∞–Ω–∏—è.", power_menu)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await send_response(
        update,
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å '{action}'?\n–û—Ç–≤–µ—Ç—å—Ç–µ 'yes' –∏–ª–∏ 'no'.",
        None
    )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    context.user_data['pending_command'] = {
        'command': command,
        'menu': power_menu
    }


async def confirm_power_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_response = update.message.text.lower()
    pending = context.user_data.get('pending_command')
    if pending and user_response in ['yes', '–¥–∞', 'y', '–¥']:
        await execute_command(pending['command'], "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.", update, pending['menu'])
        context.user_data['pending_command'] = None
    else:
        await send_response(update, "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", pending['menu'])
        context.user_data['pending_command'] = None


async def handle_system_action(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str):
    if action == "sys_info":
        cpu = psutil.cpu_percent(interval=1)
        mem = psutil.virtual_memory().percent
        await send_response(update, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nCPU: {cpu}%\nRAM: {mem}%", system_menu)
    elif action == "sys_vol_mute":
        await execute_command(
            ["pactl", "set-sink-mute", "@DEFAULT_SINK@", "toggle"],
            "üîá –ó–≤—É–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω.",
            update,
            system_menu
        )
    elif action == "sys_vol_set":
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (0-150):",
            reply_markup=ForceReply(selective=True)
        )
    elif action == "sys_alerts":
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
        if not context.job_queue.get_jobs_by_name('system_monitor'):
            context.job_queue.run_repeating(
                monitor_system,
                interval=60,
                first=0,
                chat_id=update.effective_chat.id,
                name='system_monitor'
            )
            await send_response(update, "üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ.", system_menu)
        else:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            jobs = context.job_queue.get_jobs_by_name('system_monitor')
            for job in jobs:
                job.schedule_removal()
            await send_response(update, "üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", system_menu)


async def set_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        if update.message:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    try:
        volume = int(update.message.text)
        if 0 <= volume <= 150:
            await execute_command(
                ["pactl", "set-sink-volume", "@DEFAULT_SINK@", f"{volume}%"],
                f"üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {volume}%.",
                update,
                system_menu
            )
        else:
            await send_response(update, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 150.", system_menu)
    except ValueError:
        await send_response(update, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.", system_menu)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        if update.message:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    text = update.message.text.strip().lower()
    pending_kill = context.user_data.get('pending_kill')
    pending_power = context.user_data.get('pending_command')

    if pending_kill:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await confirm_kill_app(update, context)
    elif pending_power:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–∏—Ç–∞–Ω–∏—è
        await confirm_power_action(update, context)
    else:
        if text.startswith('/start_app'):
            await manage_app_start(update, context)
        elif text.startswith('/stop_app'):
            await manage_app_stop(update, context)
        elif re.match(r'^\d+$', text):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
            await set_volume(update, context)
        else:
            if update.message:
                await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


async def monitor_system(context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ CPU
    cpu_load = psutil.cpu_percent(interval=1)
    if cpu_load > CPU_LOAD_THRESHOLD:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_load}%"
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã CPU
    try:
        temps = psutil.sensors_temperatures()
        if 'coretemp' in temps:
            cpu_temp = max([t.current for t in temps['coretemp']])
            if cpu_temp > CPU_TEMP_THRESHOLD:
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"üå°Ô∏è –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: {cpu_temp}¬∞C"
                )
    except AttributeError:
        logger.warning("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã GPU (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    error = context.error
    logger.error(f"–û—à–∏–±–∫–∞: {error}")
    if update:
        await send_response(update, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}", None)


async def send_wakeonlan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ MAC-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    TARGET_MAC_ADDRESS = "b0:6e:bf:c8:3e:ba"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à MAC-–∞–¥—Ä–µ—Å

    try:
        send_magic_packet(TARGET_MAC_ADDRESS)
        await send_response(update, f"üí° Magic packet –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {TARGET_MAC_ADDRESS}. –ü–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å –ü–ö.", power_menu)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ magic packet: {e}")
        await send_response(update, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ magic packet: {e}", power_menu)


def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token("8137824543:AAGKP32Rjj_ctA5horpEVoKOezJSBNhsRfg").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("start_app", manage_app_start))
    application.add_handler(CommandHandler("stop_app", manage_app_stop))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–±—ç–∫–æ–≤
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
